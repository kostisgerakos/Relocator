/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.general.service.types;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** High-level network performance indicator for all UxVs */
@org.apache.avro.specific.AvroGenerated
public class GlobalNetwPerf extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1213772740067487825L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlobalNetwPerf\",\"namespace\":\"eu.rawfie.general.service.types\",\"doc\":\"High-level network performance indicator for all UxVs\",\"fields\":[{\"name\":\"resourceNames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Array of UxV canonical names\"},{\"name\":\"ifaces\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Array of interface identifiers\"},{\"name\":\"indicators\",\"type\":{\"type\":\"array\",\"items\":\"int\",\"unit\":\"Min 0, Max 5\"},\"doc\":\"Array of network performance indicators\"},{\"name\":\"comments\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Array of comments related to network performance\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Array of UxV canonical names */
   public java.util.List<java.lang.String> resourceNames;
  /** Array of interface identifiers */
   public java.util.List<java.lang.Integer> ifaces;
  /** Array of network performance indicators */
   public java.util.List<java.lang.Integer> indicators;
  /** Array of comments related to network performance */
   public java.util.List<java.lang.String> comments;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GlobalNetwPerf() {}

  /**
   * All-args constructor.
   * @param resourceNames Array of UxV canonical names
   * @param ifaces Array of interface identifiers
   * @param indicators Array of network performance indicators
   * @param comments Array of comments related to network performance
   */
  public GlobalNetwPerf(java.util.List<java.lang.String> resourceNames, java.util.List<java.lang.Integer> ifaces, java.util.List<java.lang.Integer> indicators, java.util.List<java.lang.String> comments) {
    this.resourceNames = resourceNames;
    this.ifaces = ifaces;
    this.indicators = indicators;
    this.comments = comments;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resourceNames;
    case 1: return ifaces;
    case 2: return indicators;
    case 3: return comments;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resourceNames = (java.util.List<java.lang.String>)value$; break;
    case 1: ifaces = (java.util.List<java.lang.Integer>)value$; break;
    case 2: indicators = (java.util.List<java.lang.Integer>)value$; break;
    case 3: comments = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'resourceNames' field.
   * @return Array of UxV canonical names
   */
  public java.util.List<java.lang.String> getResourceNames() {
    return resourceNames;
  }

  /**
   * Sets the value of the 'resourceNames' field.
   * Array of UxV canonical names
   * @param value the value to set.
   */
  public void setResourceNames(java.util.List<java.lang.String> value) {
    this.resourceNames = value;
  }

  /**
   * Gets the value of the 'ifaces' field.
   * @return Array of interface identifiers
   */
  public java.util.List<java.lang.Integer> getIfaces() {
    return ifaces;
  }

  /**
   * Sets the value of the 'ifaces' field.
   * Array of interface identifiers
   * @param value the value to set.
   */
  public void setIfaces(java.util.List<java.lang.Integer> value) {
    this.ifaces = value;
  }

  /**
   * Gets the value of the 'indicators' field.
   * @return Array of network performance indicators
   */
  public java.util.List<java.lang.Integer> getIndicators() {
    return indicators;
  }

  /**
   * Sets the value of the 'indicators' field.
   * Array of network performance indicators
   * @param value the value to set.
   */
  public void setIndicators(java.util.List<java.lang.Integer> value) {
    this.indicators = value;
  }

  /**
   * Gets the value of the 'comments' field.
   * @return Array of comments related to network performance
   */
  public java.util.List<java.lang.String> getComments() {
    return comments;
  }

  /**
   * Sets the value of the 'comments' field.
   * Array of comments related to network performance
   * @param value the value to set.
   */
  public void setComments(java.util.List<java.lang.String> value) {
    this.comments = value;
  }

  /**
   * Creates a new GlobalNetwPerf RecordBuilder.
   * @return A new GlobalNetwPerf RecordBuilder
   */
  public static eu.rawfie.general.service.types.GlobalNetwPerf.Builder newBuilder() {
    return new eu.rawfie.general.service.types.GlobalNetwPerf.Builder();
  }

  /**
   * Creates a new GlobalNetwPerf RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GlobalNetwPerf RecordBuilder
   */
  public static eu.rawfie.general.service.types.GlobalNetwPerf.Builder newBuilder(eu.rawfie.general.service.types.GlobalNetwPerf.Builder other) {
    return new eu.rawfie.general.service.types.GlobalNetwPerf.Builder(other);
  }

  /**
   * Creates a new GlobalNetwPerf RecordBuilder by copying an existing GlobalNetwPerf instance.
   * @param other The existing instance to copy.
   * @return A new GlobalNetwPerf RecordBuilder
   */
  public static eu.rawfie.general.service.types.GlobalNetwPerf.Builder newBuilder(eu.rawfie.general.service.types.GlobalNetwPerf other) {
    return new eu.rawfie.general.service.types.GlobalNetwPerf.Builder(other);
  }

  /**
   * RecordBuilder for GlobalNetwPerf instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlobalNetwPerf>
    implements org.apache.avro.data.RecordBuilder<GlobalNetwPerf> {

    /** Array of UxV canonical names */
    private java.util.List<java.lang.String> resourceNames;
    /** Array of interface identifiers */
    private java.util.List<java.lang.Integer> ifaces;
    /** Array of network performance indicators */
    private java.util.List<java.lang.Integer> indicators;
    /** Array of comments related to network performance */
    private java.util.List<java.lang.String> comments;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.general.service.types.GlobalNetwPerf.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resourceNames)) {
        this.resourceNames = data().deepCopy(fields()[0].schema(), other.resourceNames);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ifaces)) {
        this.ifaces = data().deepCopy(fields()[1].schema(), other.ifaces);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.indicators)) {
        this.indicators = data().deepCopy(fields()[2].schema(), other.indicators);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comments)) {
        this.comments = data().deepCopy(fields()[3].schema(), other.comments);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GlobalNetwPerf instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.general.service.types.GlobalNetwPerf other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.resourceNames)) {
        this.resourceNames = data().deepCopy(fields()[0].schema(), other.resourceNames);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ifaces)) {
        this.ifaces = data().deepCopy(fields()[1].schema(), other.ifaces);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.indicators)) {
        this.indicators = data().deepCopy(fields()[2].schema(), other.indicators);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comments)) {
        this.comments = data().deepCopy(fields()[3].schema(), other.comments);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'resourceNames' field.
      * Array of UxV canonical names
      * @return The value.
      */
    public java.util.List<java.lang.String> getResourceNames() {
      return resourceNames;
    }

    /**
      * Sets the value of the 'resourceNames' field.
      * Array of UxV canonical names
      * @param value The value of 'resourceNames'.
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder setResourceNames(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.resourceNames = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceNames' field has been set.
      * Array of UxV canonical names
      * @return True if the 'resourceNames' field has been set, false otherwise.
      */
    public boolean hasResourceNames() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resourceNames' field.
      * Array of UxV canonical names
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder clearResourceNames() {
      resourceNames = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ifaces' field.
      * Array of interface identifiers
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getIfaces() {
      return ifaces;
    }

    /**
      * Sets the value of the 'ifaces' field.
      * Array of interface identifiers
      * @param value The value of 'ifaces'.
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder setIfaces(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.ifaces = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ifaces' field has been set.
      * Array of interface identifiers
      * @return True if the 'ifaces' field has been set, false otherwise.
      */
    public boolean hasIfaces() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ifaces' field.
      * Array of interface identifiers
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder clearIfaces() {
      ifaces = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'indicators' field.
      * Array of network performance indicators
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getIndicators() {
      return indicators;
    }

    /**
      * Sets the value of the 'indicators' field.
      * Array of network performance indicators
      * @param value The value of 'indicators'.
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder setIndicators(java.util.List<java.lang.Integer> value) {
      validate(fields()[2], value);
      this.indicators = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'indicators' field has been set.
      * Array of network performance indicators
      * @return True if the 'indicators' field has been set, false otherwise.
      */
    public boolean hasIndicators() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'indicators' field.
      * Array of network performance indicators
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder clearIndicators() {
      indicators = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'comments' field.
      * Array of comments related to network performance
      * @return The value.
      */
    public java.util.List<java.lang.String> getComments() {
      return comments;
    }

    /**
      * Sets the value of the 'comments' field.
      * Array of comments related to network performance
      * @param value The value of 'comments'.
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder setComments(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.comments = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'comments' field has been set.
      * Array of comments related to network performance
      * @return True if the 'comments' field has been set, false otherwise.
      */
    public boolean hasComments() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'comments' field.
      * Array of comments related to network performance
      * @return This builder.
      */
    public eu.rawfie.general.service.types.GlobalNetwPerf.Builder clearComments() {
      comments = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GlobalNetwPerf build() {
      try {
        GlobalNetwPerf record = new GlobalNetwPerf();
        record.resourceNames = fieldSetFlags()[0] ? this.resourceNames : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.ifaces = fieldSetFlags()[1] ? this.ifaces : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.indicators = fieldSetFlags()[2] ? this.indicators : (java.util.List<java.lang.Integer>) defaultValue(fields()[2]);
        record.comments = fieldSetFlags()[3] ? this.comments : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
