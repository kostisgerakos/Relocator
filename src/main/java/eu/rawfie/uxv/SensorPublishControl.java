/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Enabled/disable publishing of specific sensor data to the message bus */
@org.apache.avro.specific.AvroGenerated
public class SensorPublishControl extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6925315633201246699L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorPublishControl\",\"namespace\":\"eu.rawfie.uxv\",\"doc\":\"Enabled/disable publishing of specific sensor data to the message bus\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the originating system\"},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the module within a given system that originated the message\"},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"Time elapsed since the Unix epoch\",\"unit\":\"ms\"}]}},{\"name\":\"destinationModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the controlled module\"},{\"name\":\"types\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"SensorType\",\"symbols\":[\"CURRENT\",\"VOLTAGE\",\"TEMPERATURE\",\"CONDUCTIVITY\",\"SALINITY\",\"WATER_DENSITY\",\"SOUND_SPEED\",\"PRESSURE\",\"RGB_CAM\",\"RGBD_CAM\",\"LIDAR\"]}},\"doc\":\"Applicable quantities\"},{\"name\":\"enabled\",\"type\":\"boolean\",\"doc\":\"True to enable publishing to the message bus, false otherwise.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.rawfie.uxv.Header header;
  /** Canonical name of the controlled module */
   public java.lang.String destinationModule;
  /** Applicable quantities */
   public java.util.List<eu.rawfie.uxv.SensorType> types;
  /** True to enable publishing to the message bus, false otherwise. */
   public boolean enabled;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorPublishControl() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param destinationModule Canonical name of the controlled module
   * @param types Applicable quantities
   * @param enabled True to enable publishing to the message bus, false otherwise.
   */
  public SensorPublishControl(eu.rawfie.uxv.Header header, java.lang.String destinationModule, java.util.List<eu.rawfie.uxv.SensorType> types, java.lang.Boolean enabled) {
    this.header = header;
    this.destinationModule = destinationModule;
    this.types = types;
    this.enabled = enabled;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return destinationModule;
    case 2: return types;
    case 3: return enabled;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.Header)value$; break;
    case 1: destinationModule = (java.lang.String)value$; break;
    case 2: types = (java.util.List<eu.rawfie.uxv.SensorType>)value$; break;
    case 3: enabled = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'destinationModule' field.
   * @return Canonical name of the controlled module
   */
  public java.lang.String getDestinationModule() {
    return destinationModule;
  }

  /**
   * Sets the value of the 'destinationModule' field.
   * Canonical name of the controlled module
   * @param value the value to set.
   */
  public void setDestinationModule(java.lang.String value) {
    this.destinationModule = value;
  }

  /**
   * Gets the value of the 'types' field.
   * @return Applicable quantities
   */
  public java.util.List<eu.rawfie.uxv.SensorType> getTypes() {
    return types;
  }

  /**
   * Sets the value of the 'types' field.
   * Applicable quantities
   * @param value the value to set.
   */
  public void setTypes(java.util.List<eu.rawfie.uxv.SensorType> value) {
    this.types = value;
  }

  /**
   * Gets the value of the 'enabled' field.
   * @return True to enable publishing to the message bus, false otherwise.
   */
  public java.lang.Boolean getEnabled() {
    return enabled;
  }

  /**
   * Sets the value of the 'enabled' field.
   * True to enable publishing to the message bus, false otherwise.
   * @param value the value to set.
   */
  public void setEnabled(java.lang.Boolean value) {
    this.enabled = value;
  }

  /**
   * Creates a new SensorPublishControl RecordBuilder.
   * @return A new SensorPublishControl RecordBuilder
   */
  public static eu.rawfie.uxv.SensorPublishControl.Builder newBuilder() {
    return new eu.rawfie.uxv.SensorPublishControl.Builder();
  }

  /**
   * Creates a new SensorPublishControl RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorPublishControl RecordBuilder
   */
  public static eu.rawfie.uxv.SensorPublishControl.Builder newBuilder(eu.rawfie.uxv.SensorPublishControl.Builder other) {
    return new eu.rawfie.uxv.SensorPublishControl.Builder(other);
  }

  /**
   * Creates a new SensorPublishControl RecordBuilder by copying an existing SensorPublishControl instance.
   * @param other The existing instance to copy.
   * @return A new SensorPublishControl RecordBuilder
   */
  public static eu.rawfie.uxv.SensorPublishControl.Builder newBuilder(eu.rawfie.uxv.SensorPublishControl other) {
    return new eu.rawfie.uxv.SensorPublishControl.Builder(other);
  }

  /**
   * RecordBuilder for SensorPublishControl instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorPublishControl>
    implements org.apache.avro.data.RecordBuilder<SensorPublishControl> {

    private eu.rawfie.uxv.Header header;
    private eu.rawfie.uxv.Header.Builder headerBuilder;
    /** Canonical name of the controlled module */
    private java.lang.String destinationModule;
    /** Applicable quantities */
    private java.util.List<eu.rawfie.uxv.SensorType> types;
    /** True to enable publishing to the message bus, false otherwise. */
    private boolean enabled;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.SensorPublishControl.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.destinationModule)) {
        this.destinationModule = data().deepCopy(fields()[1].schema(), other.destinationModule);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.types)) {
        this.types = data().deepCopy(fields()[2].schema(), other.types);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.enabled)) {
        this.enabled = data().deepCopy(fields()[3].schema(), other.enabled);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SensorPublishControl instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.SensorPublishControl other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.destinationModule)) {
        this.destinationModule = data().deepCopy(fields()[1].schema(), other.destinationModule);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.types)) {
        this.types = data().deepCopy(fields()[2].schema(), other.types);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.enabled)) {
        this.enabled = data().deepCopy(fields()[3].schema(), other.enabled);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder setHeader(eu.rawfie.uxv.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.SensorPublishControl.Builder setHeaderBuilder(eu.rawfie.uxv.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationModule' field.
      * Canonical name of the controlled module
      * @return The value.
      */
    public java.lang.String getDestinationModule() {
      return destinationModule;
    }

    /**
      * Sets the value of the 'destinationModule' field.
      * Canonical name of the controlled module
      * @param value The value of 'destinationModule'.
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder setDestinationModule(java.lang.String value) {
      validate(fields()[1], value);
      this.destinationModule = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationModule' field has been set.
      * Canonical name of the controlled module
      * @return True if the 'destinationModule' field has been set, false otherwise.
      */
    public boolean hasDestinationModule() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'destinationModule' field.
      * Canonical name of the controlled module
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder clearDestinationModule() {
      destinationModule = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'types' field.
      * Applicable quantities
      * @return The value.
      */
    public java.util.List<eu.rawfie.uxv.SensorType> getTypes() {
      return types;
    }

    /**
      * Sets the value of the 'types' field.
      * Applicable quantities
      * @param value The value of 'types'.
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder setTypes(java.util.List<eu.rawfie.uxv.SensorType> value) {
      validate(fields()[2], value);
      this.types = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'types' field has been set.
      * Applicable quantities
      * @return True if the 'types' field has been set, false otherwise.
      */
    public boolean hasTypes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'types' field.
      * Applicable quantities
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder clearTypes() {
      types = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'enabled' field.
      * True to enable publishing to the message bus, false otherwise.
      * @return The value.
      */
    public java.lang.Boolean getEnabled() {
      return enabled;
    }

    /**
      * Sets the value of the 'enabled' field.
      * True to enable publishing to the message bus, false otherwise.
      * @param value The value of 'enabled'.
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder setEnabled(boolean value) {
      validate(fields()[3], value);
      this.enabled = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'enabled' field has been set.
      * True to enable publishing to the message bus, false otherwise.
      * @return True if the 'enabled' field has been set, false otherwise.
      */
    public boolean hasEnabled() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'enabled' field.
      * True to enable publishing to the message bus, false otherwise.
      * @return This builder.
      */
    public eu.rawfie.uxv.SensorPublishControl.Builder clearEnabled() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SensorPublishControl build() {
      try {
        SensorPublishControl record = new SensorPublishControl();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.Header) defaultValue(fields()[0]);
        }
        record.destinationModule = fieldSetFlags()[1] ? this.destinationModule : (java.lang.String) defaultValue(fields()[1]);
        record.types = fieldSetFlags()[2] ? this.types : (java.util.List<eu.rawfie.uxv.SensorType>) defaultValue(fields()[2]);
        record.enabled = fieldSetFlags()[3] ? this.enabled : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
