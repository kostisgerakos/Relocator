/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv.nested;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Distance to the closest object at a specific orientation of the UxV */
@org.apache.avro.specific.AvroGenerated
public class ObjectDistance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6021587444296684351L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ObjectDistance\",\"namespace\":\"eu.rawfie.uxv.nested\",\"doc\":\"Distance to the closest object at a specific orientation of the UxV\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"time\",\"type\":\"long\"}]}},{\"name\":\"min_d\",\"type\":\"float\",\"doc\":\"Minimum distance the sensor can measure\",\"unit\":\"METER\"},{\"name\":\"max_d\",\"type\":\"float\",\"doc\":\"Maximum distance the sensor can measure\",\"unit\":\"METER\"},{\"name\":\"distance\",\"type\":\"float\",\"doc\":\"Current distance of the UxV from the closest object\",\"unit\":\"METER\"},{\"name\":\"orientation\",\"type\":{\"type\":\"enum\",\"name\":\"UxVOrientationEnum\",\"namespace\":\"eu.rawfie.uxv\",\"symbols\":[\"ROTATION_NONE\",\"ROTATION_YAW_45\",\"ROTATION_YAW_90\",\"ROTATION_YAW_135\",\"ROTATION_YAW_180\",\"ROTATION_YAW_225\",\"ROTATION_YAW_270\",\"ROTATION_YAW_315\",\"ROTATION_PITCH_90\",\"ROTATION_PITCH_270\"]},\"doc\":\"Direction the distance sensor of the UxV faces\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.rawfie.uxv.nested.Header header;
  /** Minimum distance the sensor can measure */
   public float min_d;
  /** Maximum distance the sensor can measure */
   public float max_d;
  /** Current distance of the UxV from the closest object */
   public float distance;
  /** Direction the distance sensor of the UxV faces */
   public eu.rawfie.uxv.UxVOrientationEnum orientation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ObjectDistance() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param min_d Minimum distance the sensor can measure
   * @param max_d Maximum distance the sensor can measure
   * @param distance Current distance of the UxV from the closest object
   * @param orientation Direction the distance sensor of the UxV faces
   */
  public ObjectDistance(eu.rawfie.uxv.nested.Header header, java.lang.Float min_d, java.lang.Float max_d, java.lang.Float distance, eu.rawfie.uxv.UxVOrientationEnum orientation) {
    this.header = header;
    this.min_d = min_d;
    this.max_d = max_d;
    this.distance = distance;
    this.orientation = orientation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return min_d;
    case 2: return max_d;
    case 3: return distance;
    case 4: return orientation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.nested.Header)value$; break;
    case 1: min_d = (java.lang.Float)value$; break;
    case 2: max_d = (java.lang.Float)value$; break;
    case 3: distance = (java.lang.Float)value$; break;
    case 4: orientation = (eu.rawfie.uxv.UxVOrientationEnum)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.nested.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.nested.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'min_d' field.
   * @return Minimum distance the sensor can measure
   */
  public java.lang.Float getMinD() {
    return min_d;
  }

  /**
   * Sets the value of the 'min_d' field.
   * Minimum distance the sensor can measure
   * @param value the value to set.
   */
  public void setMinD(java.lang.Float value) {
    this.min_d = value;
  }

  /**
   * Gets the value of the 'max_d' field.
   * @return Maximum distance the sensor can measure
   */
  public java.lang.Float getMaxD() {
    return max_d;
  }

  /**
   * Sets the value of the 'max_d' field.
   * Maximum distance the sensor can measure
   * @param value the value to set.
   */
  public void setMaxD(java.lang.Float value) {
    this.max_d = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return Current distance of the UxV from the closest object
   */
  public java.lang.Float getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * Current distance of the UxV from the closest object
   * @param value the value to set.
   */
  public void setDistance(java.lang.Float value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'orientation' field.
   * @return Direction the distance sensor of the UxV faces
   */
  public eu.rawfie.uxv.UxVOrientationEnum getOrientation() {
    return orientation;
  }

  /**
   * Sets the value of the 'orientation' field.
   * Direction the distance sensor of the UxV faces
   * @param value the value to set.
   */
  public void setOrientation(eu.rawfie.uxv.UxVOrientationEnum value) {
    this.orientation = value;
  }

  /**
   * Creates a new ObjectDistance RecordBuilder.
   * @return A new ObjectDistance RecordBuilder
   */
  public static eu.rawfie.uxv.nested.ObjectDistance.Builder newBuilder() {
    return new eu.rawfie.uxv.nested.ObjectDistance.Builder();
  }

  /**
   * Creates a new ObjectDistance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ObjectDistance RecordBuilder
   */
  public static eu.rawfie.uxv.nested.ObjectDistance.Builder newBuilder(eu.rawfie.uxv.nested.ObjectDistance.Builder other) {
    return new eu.rawfie.uxv.nested.ObjectDistance.Builder(other);
  }

  /**
   * Creates a new ObjectDistance RecordBuilder by copying an existing ObjectDistance instance.
   * @param other The existing instance to copy.
   * @return A new ObjectDistance RecordBuilder
   */
  public static eu.rawfie.uxv.nested.ObjectDistance.Builder newBuilder(eu.rawfie.uxv.nested.ObjectDistance other) {
    return new eu.rawfie.uxv.nested.ObjectDistance.Builder(other);
  }

  /**
   * RecordBuilder for ObjectDistance instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ObjectDistance>
    implements org.apache.avro.data.RecordBuilder<ObjectDistance> {

    private eu.rawfie.uxv.nested.Header header;
    private eu.rawfie.uxv.nested.Header.Builder headerBuilder;
    /** Minimum distance the sensor can measure */
    private float min_d;
    /** Maximum distance the sensor can measure */
    private float max_d;
    /** Current distance of the UxV from the closest object */
    private float distance;
    /** Direction the distance sensor of the UxV faces */
    private eu.rawfie.uxv.UxVOrientationEnum orientation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.nested.ObjectDistance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.nested.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.min_d)) {
        this.min_d = data().deepCopy(fields()[1].schema(), other.min_d);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.max_d)) {
        this.max_d = data().deepCopy(fields()[2].schema(), other.max_d);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.distance)) {
        this.distance = data().deepCopy(fields()[3].schema(), other.distance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.orientation)) {
        this.orientation = data().deepCopy(fields()[4].schema(), other.orientation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ObjectDistance instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.nested.ObjectDistance other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.min_d)) {
        this.min_d = data().deepCopy(fields()[1].schema(), other.min_d);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.max_d)) {
        this.max_d = data().deepCopy(fields()[2].schema(), other.max_d);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.distance)) {
        this.distance = data().deepCopy(fields()[3].schema(), other.distance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.orientation)) {
        this.orientation = data().deepCopy(fields()[4].schema(), other.orientation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.nested.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder setHeader(eu.rawfie.uxv.nested.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.nested.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.nested.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.nested.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder setHeaderBuilder(eu.rawfie.uxv.nested.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'min_d' field.
      * Minimum distance the sensor can measure
      * @return The value.
      */
    public java.lang.Float getMinD() {
      return min_d;
    }

    /**
      * Sets the value of the 'min_d' field.
      * Minimum distance the sensor can measure
      * @param value The value of 'min_d'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder setMinD(float value) {
      validate(fields()[1], value);
      this.min_d = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'min_d' field has been set.
      * Minimum distance the sensor can measure
      * @return True if the 'min_d' field has been set, false otherwise.
      */
    public boolean hasMinD() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'min_d' field.
      * Minimum distance the sensor can measure
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder clearMinD() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'max_d' field.
      * Maximum distance the sensor can measure
      * @return The value.
      */
    public java.lang.Float getMaxD() {
      return max_d;
    }

    /**
      * Sets the value of the 'max_d' field.
      * Maximum distance the sensor can measure
      * @param value The value of 'max_d'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder setMaxD(float value) {
      validate(fields()[2], value);
      this.max_d = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'max_d' field has been set.
      * Maximum distance the sensor can measure
      * @return True if the 'max_d' field has been set, false otherwise.
      */
    public boolean hasMaxD() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'max_d' field.
      * Maximum distance the sensor can measure
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder clearMaxD() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * Current distance of the UxV from the closest object
      * @return The value.
      */
    public java.lang.Float getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * Current distance of the UxV from the closest object
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder setDistance(float value) {
      validate(fields()[3], value);
      this.distance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * Current distance of the UxV from the closest object
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'distance' field.
      * Current distance of the UxV from the closest object
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder clearDistance() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'orientation' field.
      * Direction the distance sensor of the UxV faces
      * @return The value.
      */
    public eu.rawfie.uxv.UxVOrientationEnum getOrientation() {
      return orientation;
    }

    /**
      * Sets the value of the 'orientation' field.
      * Direction the distance sensor of the UxV faces
      * @param value The value of 'orientation'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder setOrientation(eu.rawfie.uxv.UxVOrientationEnum value) {
      validate(fields()[4], value);
      this.orientation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'orientation' field has been set.
      * Direction the distance sensor of the UxV faces
      * @return True if the 'orientation' field has been set, false otherwise.
      */
    public boolean hasOrientation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'orientation' field.
      * Direction the distance sensor of the UxV faces
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.ObjectDistance.Builder clearOrientation() {
      orientation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ObjectDistance build() {
      try {
        ObjectDistance record = new ObjectDistance();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.nested.Header) defaultValue(fields()[0]);
        }
        record.min_d = fieldSetFlags()[1] ? this.min_d : (java.lang.Float) defaultValue(fields()[1]);
        record.max_d = fieldSetFlags()[2] ? this.max_d : (java.lang.Float) defaultValue(fields()[2]);
        record.distance = fieldSetFlags()[3] ? this.distance : (java.lang.Float) defaultValue(fields()[3]);
        record.orientation = fieldSetFlags()[4] ? this.orientation : (eu.rawfie.uxv.UxVOrientationEnum) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
