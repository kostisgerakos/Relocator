/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Single scan from a planar laser range-finder */
@org.apache.avro.specific.AvroGenerated
public class LaserScan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5385099010967351014L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LaserScan\",\"namespace\":\"eu.rawfie.uxv\",\"doc\":\"Single scan from a planar laser range-finder\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the originating system\"},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the module within a given system that originated the message\"},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"Time elapsed since the Unix epoch\",\"unit\":\"ms\"}]}},{\"name\":\"angle_min\",\"type\":\"float\",\"unit\":\"rad\"},{\"name\":\"angle_max\",\"type\":\"float\",\"unit\":\"rad\"},{\"name\":\"angle_increment\",\"type\":\"float\",\"unit\":\"rad\"},{\"name\":\"time_increment\",\"type\":\"float\",\"unit\":\"seconds\"},{\"name\":\"scan_time\",\"type\":\"float\",\"unit\":\"seconds\"},{\"name\":\"range_min\",\"type\":\"float\",\"unit\":\"m\"},{\"name\":\"range_max\",\"type\":\"float\",\"unit\":\"m\"},{\"name\":\"ranges\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"unit\":\"m\"}},{\"name\":\"intensities\",\"type\":{\"type\":\"array\",\"items\":\"float\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.rawfie.uxv.Header header;
   public float angle_min;
   public float angle_max;
   public float angle_increment;
   public float time_increment;
   public float scan_time;
   public float range_min;
   public float range_max;
   public java.util.List<java.lang.Float> ranges;
   public java.util.List<java.lang.Float> intensities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LaserScan() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param angle_min The new value for angle_min
   * @param angle_max The new value for angle_max
   * @param angle_increment The new value for angle_increment
   * @param time_increment The new value for time_increment
   * @param scan_time The new value for scan_time
   * @param range_min The new value for range_min
   * @param range_max The new value for range_max
   * @param ranges The new value for ranges
   * @param intensities The new value for intensities
   */
  public LaserScan(eu.rawfie.uxv.Header header, java.lang.Float angle_min, java.lang.Float angle_max, java.lang.Float angle_increment, java.lang.Float time_increment, java.lang.Float scan_time, java.lang.Float range_min, java.lang.Float range_max, java.util.List<java.lang.Float> ranges, java.util.List<java.lang.Float> intensities) {
    this.header = header;
    this.angle_min = angle_min;
    this.angle_max = angle_max;
    this.angle_increment = angle_increment;
    this.time_increment = time_increment;
    this.scan_time = scan_time;
    this.range_min = range_min;
    this.range_max = range_max;
    this.ranges = ranges;
    this.intensities = intensities;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return angle_min;
    case 2: return angle_max;
    case 3: return angle_increment;
    case 4: return time_increment;
    case 5: return scan_time;
    case 6: return range_min;
    case 7: return range_max;
    case 8: return ranges;
    case 9: return intensities;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.Header)value$; break;
    case 1: angle_min = (java.lang.Float)value$; break;
    case 2: angle_max = (java.lang.Float)value$; break;
    case 3: angle_increment = (java.lang.Float)value$; break;
    case 4: time_increment = (java.lang.Float)value$; break;
    case 5: scan_time = (java.lang.Float)value$; break;
    case 6: range_min = (java.lang.Float)value$; break;
    case 7: range_max = (java.lang.Float)value$; break;
    case 8: ranges = (java.util.List<java.lang.Float>)value$; break;
    case 9: intensities = (java.util.List<java.lang.Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'angle_min' field.
   * @return The value of the 'angle_min' field.
   */
  public java.lang.Float getAngleMin() {
    return angle_min;
  }

  /**
   * Sets the value of the 'angle_min' field.
   * @param value the value to set.
   */
  public void setAngleMin(java.lang.Float value) {
    this.angle_min = value;
  }

  /**
   * Gets the value of the 'angle_max' field.
   * @return The value of the 'angle_max' field.
   */
  public java.lang.Float getAngleMax() {
    return angle_max;
  }

  /**
   * Sets the value of the 'angle_max' field.
   * @param value the value to set.
   */
  public void setAngleMax(java.lang.Float value) {
    this.angle_max = value;
  }

  /**
   * Gets the value of the 'angle_increment' field.
   * @return The value of the 'angle_increment' field.
   */
  public java.lang.Float getAngleIncrement() {
    return angle_increment;
  }

  /**
   * Sets the value of the 'angle_increment' field.
   * @param value the value to set.
   */
  public void setAngleIncrement(java.lang.Float value) {
    this.angle_increment = value;
  }

  /**
   * Gets the value of the 'time_increment' field.
   * @return The value of the 'time_increment' field.
   */
  public java.lang.Float getTimeIncrement() {
    return time_increment;
  }

  /**
   * Sets the value of the 'time_increment' field.
   * @param value the value to set.
   */
  public void setTimeIncrement(java.lang.Float value) {
    this.time_increment = value;
  }

  /**
   * Gets the value of the 'scan_time' field.
   * @return The value of the 'scan_time' field.
   */
  public java.lang.Float getScanTime() {
    return scan_time;
  }

  /**
   * Sets the value of the 'scan_time' field.
   * @param value the value to set.
   */
  public void setScanTime(java.lang.Float value) {
    this.scan_time = value;
  }

  /**
   * Gets the value of the 'range_min' field.
   * @return The value of the 'range_min' field.
   */
  public java.lang.Float getRangeMin() {
    return range_min;
  }

  /**
   * Sets the value of the 'range_min' field.
   * @param value the value to set.
   */
  public void setRangeMin(java.lang.Float value) {
    this.range_min = value;
  }

  /**
   * Gets the value of the 'range_max' field.
   * @return The value of the 'range_max' field.
   */
  public java.lang.Float getRangeMax() {
    return range_max;
  }

  /**
   * Sets the value of the 'range_max' field.
   * @param value the value to set.
   */
  public void setRangeMax(java.lang.Float value) {
    this.range_max = value;
  }

  /**
   * Gets the value of the 'ranges' field.
   * @return The value of the 'ranges' field.
   */
  public java.util.List<java.lang.Float> getRanges() {
    return ranges;
  }

  /**
   * Sets the value of the 'ranges' field.
   * @param value the value to set.
   */
  public void setRanges(java.util.List<java.lang.Float> value) {
    this.ranges = value;
  }

  /**
   * Gets the value of the 'intensities' field.
   * @return The value of the 'intensities' field.
   */
  public java.util.List<java.lang.Float> getIntensities() {
    return intensities;
  }

  /**
   * Sets the value of the 'intensities' field.
   * @param value the value to set.
   */
  public void setIntensities(java.util.List<java.lang.Float> value) {
    this.intensities = value;
  }

  /**
   * Creates a new LaserScan RecordBuilder.
   * @return A new LaserScan RecordBuilder
   */
  public static eu.rawfie.uxv.LaserScan.Builder newBuilder() {
    return new eu.rawfie.uxv.LaserScan.Builder();
  }

  /**
   * Creates a new LaserScan RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LaserScan RecordBuilder
   */
  public static eu.rawfie.uxv.LaserScan.Builder newBuilder(eu.rawfie.uxv.LaserScan.Builder other) {
    return new eu.rawfie.uxv.LaserScan.Builder(other);
  }

  /**
   * Creates a new LaserScan RecordBuilder by copying an existing LaserScan instance.
   * @param other The existing instance to copy.
   * @return A new LaserScan RecordBuilder
   */
  public static eu.rawfie.uxv.LaserScan.Builder newBuilder(eu.rawfie.uxv.LaserScan other) {
    return new eu.rawfie.uxv.LaserScan.Builder(other);
  }

  /**
   * RecordBuilder for LaserScan instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LaserScan>
    implements org.apache.avro.data.RecordBuilder<LaserScan> {

    private eu.rawfie.uxv.Header header;
    private eu.rawfie.uxv.Header.Builder headerBuilder;
    private float angle_min;
    private float angle_max;
    private float angle_increment;
    private float time_increment;
    private float scan_time;
    private float range_min;
    private float range_max;
    private java.util.List<java.lang.Float> ranges;
    private java.util.List<java.lang.Float> intensities;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.LaserScan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.angle_min)) {
        this.angle_min = data().deepCopy(fields()[1].schema(), other.angle_min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.angle_max)) {
        this.angle_max = data().deepCopy(fields()[2].schema(), other.angle_max);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.angle_increment)) {
        this.angle_increment = data().deepCopy(fields()[3].schema(), other.angle_increment);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time_increment)) {
        this.time_increment = data().deepCopy(fields()[4].schema(), other.time_increment);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scan_time)) {
        this.scan_time = data().deepCopy(fields()[5].schema(), other.scan_time);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.range_min)) {
        this.range_min = data().deepCopy(fields()[6].schema(), other.range_min);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.range_max)) {
        this.range_max = data().deepCopy(fields()[7].schema(), other.range_max);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ranges)) {
        this.ranges = data().deepCopy(fields()[8].schema(), other.ranges);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.intensities)) {
        this.intensities = data().deepCopy(fields()[9].schema(), other.intensities);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LaserScan instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.LaserScan other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.angle_min)) {
        this.angle_min = data().deepCopy(fields()[1].schema(), other.angle_min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.angle_max)) {
        this.angle_max = data().deepCopy(fields()[2].schema(), other.angle_max);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.angle_increment)) {
        this.angle_increment = data().deepCopy(fields()[3].schema(), other.angle_increment);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time_increment)) {
        this.time_increment = data().deepCopy(fields()[4].schema(), other.time_increment);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scan_time)) {
        this.scan_time = data().deepCopy(fields()[5].schema(), other.scan_time);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.range_min)) {
        this.range_min = data().deepCopy(fields()[6].schema(), other.range_min);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.range_max)) {
        this.range_max = data().deepCopy(fields()[7].schema(), other.range_max);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ranges)) {
        this.ranges = data().deepCopy(fields()[8].schema(), other.ranges);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.intensities)) {
        this.intensities = data().deepCopy(fields()[9].schema(), other.intensities);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setHeader(eu.rawfie.uxv.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.LaserScan.Builder setHeaderBuilder(eu.rawfie.uxv.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'angle_min' field.
      * @return The value.
      */
    public java.lang.Float getAngleMin() {
      return angle_min;
    }

    /**
      * Sets the value of the 'angle_min' field.
      * @param value The value of 'angle_min'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setAngleMin(float value) {
      validate(fields()[1], value);
      this.angle_min = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'angle_min' field has been set.
      * @return True if the 'angle_min' field has been set, false otherwise.
      */
    public boolean hasAngleMin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'angle_min' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearAngleMin() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'angle_max' field.
      * @return The value.
      */
    public java.lang.Float getAngleMax() {
      return angle_max;
    }

    /**
      * Sets the value of the 'angle_max' field.
      * @param value The value of 'angle_max'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setAngleMax(float value) {
      validate(fields()[2], value);
      this.angle_max = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'angle_max' field has been set.
      * @return True if the 'angle_max' field has been set, false otherwise.
      */
    public boolean hasAngleMax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'angle_max' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearAngleMax() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'angle_increment' field.
      * @return The value.
      */
    public java.lang.Float getAngleIncrement() {
      return angle_increment;
    }

    /**
      * Sets the value of the 'angle_increment' field.
      * @param value The value of 'angle_increment'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setAngleIncrement(float value) {
      validate(fields()[3], value);
      this.angle_increment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'angle_increment' field has been set.
      * @return True if the 'angle_increment' field has been set, false otherwise.
      */
    public boolean hasAngleIncrement() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'angle_increment' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearAngleIncrement() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_increment' field.
      * @return The value.
      */
    public java.lang.Float getTimeIncrement() {
      return time_increment;
    }

    /**
      * Sets the value of the 'time_increment' field.
      * @param value The value of 'time_increment'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setTimeIncrement(float value) {
      validate(fields()[4], value);
      this.time_increment = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'time_increment' field has been set.
      * @return True if the 'time_increment' field has been set, false otherwise.
      */
    public boolean hasTimeIncrement() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'time_increment' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearTimeIncrement() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'scan_time' field.
      * @return The value.
      */
    public java.lang.Float getScanTime() {
      return scan_time;
    }

    /**
      * Sets the value of the 'scan_time' field.
      * @param value The value of 'scan_time'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setScanTime(float value) {
      validate(fields()[5], value);
      this.scan_time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'scan_time' field has been set.
      * @return True if the 'scan_time' field has been set, false otherwise.
      */
    public boolean hasScanTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'scan_time' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearScanTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'range_min' field.
      * @return The value.
      */
    public java.lang.Float getRangeMin() {
      return range_min;
    }

    /**
      * Sets the value of the 'range_min' field.
      * @param value The value of 'range_min'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setRangeMin(float value) {
      validate(fields()[6], value);
      this.range_min = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'range_min' field has been set.
      * @return True if the 'range_min' field has been set, false otherwise.
      */
    public boolean hasRangeMin() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'range_min' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearRangeMin() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'range_max' field.
      * @return The value.
      */
    public java.lang.Float getRangeMax() {
      return range_max;
    }

    /**
      * Sets the value of the 'range_max' field.
      * @param value The value of 'range_max'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setRangeMax(float value) {
      validate(fields()[7], value);
      this.range_max = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'range_max' field has been set.
      * @return True if the 'range_max' field has been set, false otherwise.
      */
    public boolean hasRangeMax() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'range_max' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearRangeMax() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ranges' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getRanges() {
      return ranges;
    }

    /**
      * Sets the value of the 'ranges' field.
      * @param value The value of 'ranges'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setRanges(java.util.List<java.lang.Float> value) {
      validate(fields()[8], value);
      this.ranges = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ranges' field has been set.
      * @return True if the 'ranges' field has been set, false otherwise.
      */
    public boolean hasRanges() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ranges' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearRanges() {
      ranges = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'intensities' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getIntensities() {
      return intensities;
    }

    /**
      * Sets the value of the 'intensities' field.
      * @param value The value of 'intensities'.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder setIntensities(java.util.List<java.lang.Float> value) {
      validate(fields()[9], value);
      this.intensities = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'intensities' field has been set.
      * @return True if the 'intensities' field has been set, false otherwise.
      */
    public boolean hasIntensities() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'intensities' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.LaserScan.Builder clearIntensities() {
      intensities = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public LaserScan build() {
      try {
        LaserScan record = new LaserScan();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.Header) defaultValue(fields()[0]);
        }
        record.angle_min = fieldSetFlags()[1] ? this.angle_min : (java.lang.Float) defaultValue(fields()[1]);
        record.angle_max = fieldSetFlags()[2] ? this.angle_max : (java.lang.Float) defaultValue(fields()[2]);
        record.angle_increment = fieldSetFlags()[3] ? this.angle_increment : (java.lang.Float) defaultValue(fields()[3]);
        record.time_increment = fieldSetFlags()[4] ? this.time_increment : (java.lang.Float) defaultValue(fields()[4]);
        record.scan_time = fieldSetFlags()[5] ? this.scan_time : (java.lang.Float) defaultValue(fields()[5]);
        record.range_min = fieldSetFlags()[6] ? this.range_min : (java.lang.Float) defaultValue(fields()[6]);
        record.range_max = fieldSetFlags()[7] ? this.range_max : (java.lang.Float) defaultValue(fields()[7]);
        record.ranges = fieldSetFlags()[8] ? this.ranges : (java.util.List<java.lang.Float>) defaultValue(fields()[8]);
        record.intensities = fieldSetFlags()[9] ? this.intensities : (java.util.List<java.lang.Float>) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
