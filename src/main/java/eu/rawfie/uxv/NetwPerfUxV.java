/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** UxV network performance report */
@org.apache.avro.specific.AvroGenerated
public class NetwPerfUxV extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5128564094861696348L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NetwPerfUxV\",\"namespace\":\"eu.rawfie.uxv\",\"doc\":\"UxV network performance report\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the originating system\"},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the module within a given system that originated the message\"},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"Time elapsed since the Unix epoch\",\"unit\":\"ms\"}]}},{\"name\":\"interface_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Network interface identifier\"},{\"name\":\"bitrate\",\"type\":\"float\",\"doc\":\"Effective bitrate\",\"unit\":\"Kbps\"},{\"name\":\"latency\",\"type\":\"float\",\"doc\":\"Average latency for posting messages to the bus\",\"unit\":\"ms\"},{\"name\":\"lqi\",\"type\":\"int\",\"doc\":\"Wireless link quality indicator\",\"unit\":\"indicator min 0 max 70\"},{\"name\":\"rssi\",\"type\":\"int\",\"doc\":\"Average RSSI of the network connection\",\"unit\":\"dB(m)\"},{\"name\":\"active\",\"type\":\"boolean\",\"doc\":\"Connection currently in use to interact with the message bus\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.rawfie.uxv.Header header;
  /** Network interface identifier */
   public java.lang.String interface_name;
  /** Effective bitrate */
   public float bitrate;
  /** Average latency for posting messages to the bus */
   public float latency;
  /** Wireless link quality indicator */
   public int lqi;
  /** Average RSSI of the network connection */
   public int rssi;
  /** Connection currently in use to interact with the message bus */
   public boolean active;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NetwPerfUxV() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param interface_name Network interface identifier
   * @param bitrate Effective bitrate
   * @param latency Average latency for posting messages to the bus
   * @param lqi Wireless link quality indicator
   * @param rssi Average RSSI of the network connection
   * @param active Connection currently in use to interact with the message bus
   */
  public NetwPerfUxV(eu.rawfie.uxv.Header header, java.lang.String interface_name, java.lang.Float bitrate, java.lang.Float latency, java.lang.Integer lqi, java.lang.Integer rssi, java.lang.Boolean active) {
    this.header = header;
    this.interface_name = interface_name;
    this.bitrate = bitrate;
    this.latency = latency;
    this.lqi = lqi;
    this.rssi = rssi;
    this.active = active;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return interface_name;
    case 2: return bitrate;
    case 3: return latency;
    case 4: return lqi;
    case 5: return rssi;
    case 6: return active;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.Header)value$; break;
    case 1: interface_name = (java.lang.String)value$; break;
    case 2: bitrate = (java.lang.Float)value$; break;
    case 3: latency = (java.lang.Float)value$; break;
    case 4: lqi = (java.lang.Integer)value$; break;
    case 5: rssi = (java.lang.Integer)value$; break;
    case 6: active = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'interface_name' field.
   * @return Network interface identifier
   */
  public java.lang.String getInterfaceName() {
    return interface_name;
  }

  /**
   * Sets the value of the 'interface_name' field.
   * Network interface identifier
   * @param value the value to set.
   */
  public void setInterfaceName(java.lang.String value) {
    this.interface_name = value;
  }

  /**
   * Gets the value of the 'bitrate' field.
   * @return Effective bitrate
   */
  public java.lang.Float getBitrate() {
    return bitrate;
  }

  /**
   * Sets the value of the 'bitrate' field.
   * Effective bitrate
   * @param value the value to set.
   */
  public void setBitrate(java.lang.Float value) {
    this.bitrate = value;
  }

  /**
   * Gets the value of the 'latency' field.
   * @return Average latency for posting messages to the bus
   */
  public java.lang.Float getLatency() {
    return latency;
  }

  /**
   * Sets the value of the 'latency' field.
   * Average latency for posting messages to the bus
   * @param value the value to set.
   */
  public void setLatency(java.lang.Float value) {
    this.latency = value;
  }

  /**
   * Gets the value of the 'lqi' field.
   * @return Wireless link quality indicator
   */
  public java.lang.Integer getLqi() {
    return lqi;
  }

  /**
   * Sets the value of the 'lqi' field.
   * Wireless link quality indicator
   * @param value the value to set.
   */
  public void setLqi(java.lang.Integer value) {
    this.lqi = value;
  }

  /**
   * Gets the value of the 'rssi' field.
   * @return Average RSSI of the network connection
   */
  public java.lang.Integer getRssi() {
    return rssi;
  }

  /**
   * Sets the value of the 'rssi' field.
   * Average RSSI of the network connection
   * @param value the value to set.
   */
  public void setRssi(java.lang.Integer value) {
    this.rssi = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return Connection currently in use to interact with the message bus
   */
  public java.lang.Boolean getActive() {
    return active;
  }

  /**
   * Sets the value of the 'active' field.
   * Connection currently in use to interact with the message bus
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Creates a new NetwPerfUxV RecordBuilder.
   * @return A new NetwPerfUxV RecordBuilder
   */
  public static eu.rawfie.uxv.NetwPerfUxV.Builder newBuilder() {
    return new eu.rawfie.uxv.NetwPerfUxV.Builder();
  }

  /**
   * Creates a new NetwPerfUxV RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NetwPerfUxV RecordBuilder
   */
  public static eu.rawfie.uxv.NetwPerfUxV.Builder newBuilder(eu.rawfie.uxv.NetwPerfUxV.Builder other) {
    return new eu.rawfie.uxv.NetwPerfUxV.Builder(other);
  }

  /**
   * Creates a new NetwPerfUxV RecordBuilder by copying an existing NetwPerfUxV instance.
   * @param other The existing instance to copy.
   * @return A new NetwPerfUxV RecordBuilder
   */
  public static eu.rawfie.uxv.NetwPerfUxV.Builder newBuilder(eu.rawfie.uxv.NetwPerfUxV other) {
    return new eu.rawfie.uxv.NetwPerfUxV.Builder(other);
  }

  /**
   * RecordBuilder for NetwPerfUxV instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NetwPerfUxV>
    implements org.apache.avro.data.RecordBuilder<NetwPerfUxV> {

    private eu.rawfie.uxv.Header header;
    private eu.rawfie.uxv.Header.Builder headerBuilder;
    /** Network interface identifier */
    private java.lang.String interface_name;
    /** Effective bitrate */
    private float bitrate;
    /** Average latency for posting messages to the bus */
    private float latency;
    /** Wireless link quality indicator */
    private int lqi;
    /** Average RSSI of the network connection */
    private int rssi;
    /** Connection currently in use to interact with the message bus */
    private boolean active;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.NetwPerfUxV.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.interface_name)) {
        this.interface_name = data().deepCopy(fields()[1].schema(), other.interface_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bitrate)) {
        this.bitrate = data().deepCopy(fields()[2].schema(), other.bitrate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latency)) {
        this.latency = data().deepCopy(fields()[3].schema(), other.latency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lqi)) {
        this.lqi = data().deepCopy(fields()[4].schema(), other.lqi);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rssi)) {
        this.rssi = data().deepCopy(fields()[5].schema(), other.rssi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.active)) {
        this.active = data().deepCopy(fields()[6].schema(), other.active);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NetwPerfUxV instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.NetwPerfUxV other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.interface_name)) {
        this.interface_name = data().deepCopy(fields()[1].schema(), other.interface_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bitrate)) {
        this.bitrate = data().deepCopy(fields()[2].schema(), other.bitrate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latency)) {
        this.latency = data().deepCopy(fields()[3].schema(), other.latency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lqi)) {
        this.lqi = data().deepCopy(fields()[4].schema(), other.lqi);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rssi)) {
        this.rssi = data().deepCopy(fields()[5].schema(), other.rssi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.active)) {
        this.active = data().deepCopy(fields()[6].schema(), other.active);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setHeader(eu.rawfie.uxv.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setHeaderBuilder(eu.rawfie.uxv.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'interface_name' field.
      * Network interface identifier
      * @return The value.
      */
    public java.lang.String getInterfaceName() {
      return interface_name;
    }

    /**
      * Sets the value of the 'interface_name' field.
      * Network interface identifier
      * @param value The value of 'interface_name'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setInterfaceName(java.lang.String value) {
      validate(fields()[1], value);
      this.interface_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'interface_name' field has been set.
      * Network interface identifier
      * @return True if the 'interface_name' field has been set, false otherwise.
      */
    public boolean hasInterfaceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'interface_name' field.
      * Network interface identifier
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearInterfaceName() {
      interface_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bitrate' field.
      * Effective bitrate
      * @return The value.
      */
    public java.lang.Float getBitrate() {
      return bitrate;
    }

    /**
      * Sets the value of the 'bitrate' field.
      * Effective bitrate
      * @param value The value of 'bitrate'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setBitrate(float value) {
      validate(fields()[2], value);
      this.bitrate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bitrate' field has been set.
      * Effective bitrate
      * @return True if the 'bitrate' field has been set, false otherwise.
      */
    public boolean hasBitrate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bitrate' field.
      * Effective bitrate
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearBitrate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latency' field.
      * Average latency for posting messages to the bus
      * @return The value.
      */
    public java.lang.Float getLatency() {
      return latency;
    }

    /**
      * Sets the value of the 'latency' field.
      * Average latency for posting messages to the bus
      * @param value The value of 'latency'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setLatency(float value) {
      validate(fields()[3], value);
      this.latency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latency' field has been set.
      * Average latency for posting messages to the bus
      * @return True if the 'latency' field has been set, false otherwise.
      */
    public boolean hasLatency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latency' field.
      * Average latency for posting messages to the bus
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearLatency() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lqi' field.
      * Wireless link quality indicator
      * @return The value.
      */
    public java.lang.Integer getLqi() {
      return lqi;
    }

    /**
      * Sets the value of the 'lqi' field.
      * Wireless link quality indicator
      * @param value The value of 'lqi'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setLqi(int value) {
      validate(fields()[4], value);
      this.lqi = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lqi' field has been set.
      * Wireless link quality indicator
      * @return True if the 'lqi' field has been set, false otherwise.
      */
    public boolean hasLqi() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lqi' field.
      * Wireless link quality indicator
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearLqi() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rssi' field.
      * Average RSSI of the network connection
      * @return The value.
      */
    public java.lang.Integer getRssi() {
      return rssi;
    }

    /**
      * Sets the value of the 'rssi' field.
      * Average RSSI of the network connection
      * @param value The value of 'rssi'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setRssi(int value) {
      validate(fields()[5], value);
      this.rssi = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rssi' field has been set.
      * Average RSSI of the network connection
      * @return True if the 'rssi' field has been set, false otherwise.
      */
    public boolean hasRssi() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'rssi' field.
      * Average RSSI of the network connection
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearRssi() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * Connection currently in use to interact with the message bus
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }

    /**
      * Sets the value of the 'active' field.
      * Connection currently in use to interact with the message bus
      * @param value The value of 'active'.
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder setActive(boolean value) {
      validate(fields()[6], value);
      this.active = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * Connection currently in use to interact with the message bus
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'active' field.
      * Connection currently in use to interact with the message bus
      * @return This builder.
      */
    public eu.rawfie.uxv.NetwPerfUxV.Builder clearActive() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public NetwPerfUxV build() {
      try {
        NetwPerfUxV record = new NetwPerfUxV();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.Header) defaultValue(fields()[0]);
        }
        record.interface_name = fieldSetFlags()[1] ? this.interface_name : (java.lang.String) defaultValue(fields()[1]);
        record.bitrate = fieldSetFlags()[2] ? this.bitrate : (java.lang.Float) defaultValue(fields()[2]);
        record.latency = fieldSetFlags()[3] ? this.latency : (java.lang.Float) defaultValue(fields()[3]);
        record.lqi = fieldSetFlags()[4] ? this.lqi : (java.lang.Integer) defaultValue(fields()[4]);
        record.rssi = fieldSetFlags()[5] ? this.rssi : (java.lang.Integer) defaultValue(fields()[5]);
        record.active = fieldSetFlags()[6] ? this.active : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
