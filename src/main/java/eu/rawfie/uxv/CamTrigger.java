/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Enabled/disable periodic triggering of the camera or request a single image */
@org.apache.avro.specific.AvroGenerated
public class CamTrigger extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4335694553602597858L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CamTrigger\",\"namespace\":\"eu.rawfie.uxv\",\"doc\":\"Enabled/disable periodic triggering of the camera or request a single image\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the originating system\"},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the module within a given system that originated the message\"},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"Time elapsed since the Unix epoch\",\"unit\":\"ms\"}]}},{\"name\":\"command\",\"type\":{\"type\":\"enum\",\"name\":\"CamTriggerEnum\",\"symbols\":[\"ONCE\",\"DISTANCE_INTERVAL\",\"TIME_INTERVAL\",\"STOP\"]},\"doc\":\"Command to send to the camera\"},{\"name\":\"interval\",\"type\":\"float\",\"doc\":\"Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.rawfie.uxv.Header header;
  /** Command to send to the camera */
   public eu.rawfie.uxv.CamTriggerEnum command;
  /** Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise) */
   public float interval;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CamTrigger() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param command Command to send to the camera
   * @param interval Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
   */
  public CamTrigger(eu.rawfie.uxv.Header header, eu.rawfie.uxv.CamTriggerEnum command, java.lang.Float interval) {
    this.header = header;
    this.command = command;
    this.interval = interval;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return command;
    case 2: return interval;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.Header)value$; break;
    case 1: command = (eu.rawfie.uxv.CamTriggerEnum)value$; break;
    case 2: interval = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'command' field.
   * @return Command to send to the camera
   */
  public eu.rawfie.uxv.CamTriggerEnum getCommand() {
    return command;
  }

  /**
   * Sets the value of the 'command' field.
   * Command to send to the camera
   * @param value the value to set.
   */
  public void setCommand(eu.rawfie.uxv.CamTriggerEnum value) {
    this.command = value;
  }

  /**
   * Gets the value of the 'interval' field.
   * @return Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
   */
  public java.lang.Float getInterval() {
    return interval;
  }

  /**
   * Sets the value of the 'interval' field.
   * Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
   * @param value the value to set.
   */
  public void setInterval(java.lang.Float value) {
    this.interval = value;
  }

  /**
   * Creates a new CamTrigger RecordBuilder.
   * @return A new CamTrigger RecordBuilder
   */
  public static eu.rawfie.uxv.CamTrigger.Builder newBuilder() {
    return new eu.rawfie.uxv.CamTrigger.Builder();
  }

  /**
   * Creates a new CamTrigger RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CamTrigger RecordBuilder
   */
  public static eu.rawfie.uxv.CamTrigger.Builder newBuilder(eu.rawfie.uxv.CamTrigger.Builder other) {
    return new eu.rawfie.uxv.CamTrigger.Builder(other);
  }

  /**
   * Creates a new CamTrigger RecordBuilder by copying an existing CamTrigger instance.
   * @param other The existing instance to copy.
   * @return A new CamTrigger RecordBuilder
   */
  public static eu.rawfie.uxv.CamTrigger.Builder newBuilder(eu.rawfie.uxv.CamTrigger other) {
    return new eu.rawfie.uxv.CamTrigger.Builder(other);
  }

  /**
   * RecordBuilder for CamTrigger instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CamTrigger>
    implements org.apache.avro.data.RecordBuilder<CamTrigger> {

    private eu.rawfie.uxv.Header header;
    private eu.rawfie.uxv.Header.Builder headerBuilder;
    /** Command to send to the camera */
    private eu.rawfie.uxv.CamTriggerEnum command;
    /** Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise) */
    private float interval;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.CamTrigger.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.command)) {
        this.command = data().deepCopy(fields()[1].schema(), other.command);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interval)) {
        this.interval = data().deepCopy(fields()[2].schema(), other.interval);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CamTrigger instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.CamTrigger other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.command)) {
        this.command = data().deepCopy(fields()[1].schema(), other.command);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interval)) {
        this.interval = data().deepCopy(fields()[2].schema(), other.interval);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.CamTrigger.Builder setHeader(eu.rawfie.uxv.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.CamTrigger.Builder setHeaderBuilder(eu.rawfie.uxv.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.CamTrigger.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'command' field.
      * Command to send to the camera
      * @return The value.
      */
    public eu.rawfie.uxv.CamTriggerEnum getCommand() {
      return command;
    }

    /**
      * Sets the value of the 'command' field.
      * Command to send to the camera
      * @param value The value of 'command'.
      * @return This builder.
      */
    public eu.rawfie.uxv.CamTrigger.Builder setCommand(eu.rawfie.uxv.CamTriggerEnum value) {
      validate(fields()[1], value);
      this.command = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'command' field has been set.
      * Command to send to the camera
      * @return True if the 'command' field has been set, false otherwise.
      */
    public boolean hasCommand() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'command' field.
      * Command to send to the camera
      * @return This builder.
      */
    public eu.rawfie.uxv.CamTrigger.Builder clearCommand() {
      command = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'interval' field.
      * Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
      * @return The value.
      */
    public java.lang.Float getInterval() {
      return interval;
    }

    /**
      * Sets the value of the 'interval' field.
      * Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
      * @param value The value of 'interval'.
      * @return This builder.
      */
    public eu.rawfie.uxv.CamTrigger.Builder setInterval(float value) {
      validate(fields()[2], value);
      this.interval = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'interval' field has been set.
      * Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
      * @return True if the 'interval' field has been set, false otherwise.
      */
    public boolean hasInterval() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'interval' field.
      * Interval between images (metres for DISTANCE_INTERVAL, seconds for TIME_INTERVAL, 0 otherwise)
      * @return This builder.
      */
    public eu.rawfie.uxv.CamTrigger.Builder clearInterval() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CamTrigger build() {
      try {
        CamTrigger record = new CamTrigger();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.Header) defaultValue(fields()[0]);
        }
        record.command = fieldSetFlags()[1] ? this.command : (eu.rawfie.uxv.CamTriggerEnum) defaultValue(fields()[1]);
        record.interval = fieldSetFlags()[2] ? this.interval : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
