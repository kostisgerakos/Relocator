/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Notifies the execution status of a RAWFIE command or the UAV control transition to the human operator/pilot */
@org.apache.avro.specific.AvroGenerated
public class UAVNotification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7922967345346398720L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UAVNotification\",\"namespace\":\"eu.rawfie.uxv\",\"doc\":\"Notifies the execution status of a RAWFIE command or the UAV control transition to the human operator/pilot\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the originating system\"},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the module within a given system that originated the message\"},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"Time elapsed since the Unix epoch\",\"unit\":\"ms\"}]}},{\"name\":\"notification\",\"type\":{\"type\":\"enum\",\"name\":\"UAVNotificationEnum\",\"symbols\":[\"ARM_OK\",\"NOT_ARMED\",\"TAKEOFF_OK\",\"GOTO_OK\",\"RTL_OK\",\"ABORT_OK\",\"INVALID_COMMAND\",\"AUTO_ABORT\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.rawfie.uxv.Header header;
   public eu.rawfie.uxv.UAVNotificationEnum notification;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UAVNotification() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param notification The new value for notification
   */
  public UAVNotification(eu.rawfie.uxv.Header header, eu.rawfie.uxv.UAVNotificationEnum notification) {
    this.header = header;
    this.notification = notification;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return notification;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.Header)value$; break;
    case 1: notification = (eu.rawfie.uxv.UAVNotificationEnum)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'notification' field.
   * @return The value of the 'notification' field.
   */
  public eu.rawfie.uxv.UAVNotificationEnum getNotification() {
    return notification;
  }

  /**
   * Sets the value of the 'notification' field.
   * @param value the value to set.
   */
  public void setNotification(eu.rawfie.uxv.UAVNotificationEnum value) {
    this.notification = value;
  }

  /**
   * Creates a new UAVNotification RecordBuilder.
   * @return A new UAVNotification RecordBuilder
   */
  public static eu.rawfie.uxv.UAVNotification.Builder newBuilder() {
    return new eu.rawfie.uxv.UAVNotification.Builder();
  }

  /**
   * Creates a new UAVNotification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UAVNotification RecordBuilder
   */
  public static eu.rawfie.uxv.UAVNotification.Builder newBuilder(eu.rawfie.uxv.UAVNotification.Builder other) {
    return new eu.rawfie.uxv.UAVNotification.Builder(other);
  }

  /**
   * Creates a new UAVNotification RecordBuilder by copying an existing UAVNotification instance.
   * @param other The existing instance to copy.
   * @return A new UAVNotification RecordBuilder
   */
  public static eu.rawfie.uxv.UAVNotification.Builder newBuilder(eu.rawfie.uxv.UAVNotification other) {
    return new eu.rawfie.uxv.UAVNotification.Builder(other);
  }

  /**
   * RecordBuilder for UAVNotification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UAVNotification>
    implements org.apache.avro.data.RecordBuilder<UAVNotification> {

    private eu.rawfie.uxv.Header header;
    private eu.rawfie.uxv.Header.Builder headerBuilder;
    private eu.rawfie.uxv.UAVNotificationEnum notification;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.UAVNotification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.notification)) {
        this.notification = data().deepCopy(fields()[1].schema(), other.notification);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UAVNotification instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.UAVNotification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.notification)) {
        this.notification = data().deepCopy(fields()[1].schema(), other.notification);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.UAVNotification.Builder setHeader(eu.rawfie.uxv.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.UAVNotification.Builder setHeaderBuilder(eu.rawfie.uxv.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.UAVNotification.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'notification' field.
      * @return The value.
      */
    public eu.rawfie.uxv.UAVNotificationEnum getNotification() {
      return notification;
    }

    /**
      * Sets the value of the 'notification' field.
      * @param value The value of 'notification'.
      * @return This builder.
      */
    public eu.rawfie.uxv.UAVNotification.Builder setNotification(eu.rawfie.uxv.UAVNotificationEnum value) {
      validate(fields()[1], value);
      this.notification = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'notification' field has been set.
      * @return True if the 'notification' field has been set, false otherwise.
      */
    public boolean hasNotification() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'notification' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.UAVNotification.Builder clearNotification() {
      notification = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public UAVNotification build() {
      try {
        UAVNotification record = new UAVNotification();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.Header) defaultValue(fields()[0]);
        }
        record.notification = fieldSetFlags()[1] ? this.notification : (eu.rawfie.uxv.UAVNotificationEnum) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
